Xuemall_mobile 开发技术总结


1.	创建一个ionic 应用的app
安装ionic和cordova
需要首先安装好nodejs，然后通过npm来安装 
npm install -g cordova ionic

创建ionic项目q-metro
ionic start q-metro

参考：http://my.oschina.net/nosand/blog/294011?fromerr=Kt7h3Cy2

2.	Ionic 服务代理
服务命令可以添加一些代理HTTP服务器。这些代理是有用的，如果你正在开发的浏览器，你需要打电话给一个
外部api。有了这个功能，您可以向外部接口代理请求 通过ionic的HTTP服务器，防止没有访问控制允许源头是目前对请求的资源错误。
首先，项目中新增ionic.project文件
path：将匹配的字符串，对传入请求的网址。
proxyurl：字符串的URL请求的代理应该去。

{
  "name": "xueMall-mobile",
  "app_id": "",
  "proxies": [
    {
      "path": "/service",
      "proxyUrl": "http://cloud.21tb.com/xuemall/mobile/"
    }
  ]

angular.module('starter.controllers', [])
.constant('apiUrl',/service/ ')
//"我的" ---用户信息
 .controller('UserIndexCtrl', function ($scope, $http, apiUrl) {
     $http.get(apiUrl + 'user/userInfo.json?type=index').
            success(function (data, status, headers, config) {
                $scope.user = data;
         });
  })


3.	AngularJS ui-router (嵌套路由)
当用户在你的app中浏览时，Ionic能够保持检测他们的浏览历史。通过了解他们的浏览历史，向左或向右滑动时可以正确的在视图间转换，或不转换。一个额外的好处是Ionic的导航系统具有可以管理多个历史记录的能力。
Ionic利用AngularUI路由模块，使应用程序接口可以组织成不同的“状态”。例如Angular的核心$route服务，利用URL控制视图。然而，AngularUI路由提供了一个更强大的状态管理，即状态可以被命名，嵌套， 以及合并视图，允许一个以上模板呈现在同一个页面。此外，每个状态无需绑定到一个URL，并且数据可以更灵活地推送到每个状态。
用ionNavView指令在你的app中渲染模版。每个模板都是状态的一部分。状态通常映射到一个url上，然后用angular-ui-router定义程序（查看它们的文档，记下用ion-nav-view替换ui-view的例子）
增加很多导航条

<body>
  <ion-tabs class="tabs-positive">
    <ion-tab icon="ion-home" ui-sref="home">
      <ion-nav-view name="home"></ion-nav-view>
    </ion-tab>
    <ion-tab icon="ion-help" ui-sref="help">
      <ion-nav-view name="help"></ion-nav-view>
    </ion-tab>
  </ion-tabs>
</body>

ui-route子路由可以继承父路由,也就是说 state 设置可以嵌套,通过名称中的.(点)来区分层次.
state 配置参数
url：默认相对路径（以^开头的是绝对路径） 
views：每个子视图可以包含自己的模板、控制器和预载入数据。 (后2项选填,控制器可以在view中绑定)
abstract：抽象模板不能被激活 
template: HTML字符串或者返回HTML字符串的函数

$stateProvider
            // setup an abstract state for the tabs directive
    .state('tab', {
         url: '/tab',
         abstract: true,
         templateUrl: 'templates/tabs.html'
    })

// Each tab has its own nav history stack:

    .state('tab.dash', {
       url: '/dash',
       views: {
       'tab-dash': {
          templateUrl: 'templates/index/tab-dash.html',
            controller: 'DashCtrl'
          }
       }
    })
.state('login', {
    url: '/login',
    templateUrl: 'templates/login.html'
            })

详细了解：
http://ionicframework.net/docs/api/directive/ionNavView/
http://learn.ionicframework.com/formulas/navigation-and-routing-part-1/
4.	安装支付宝支付插件
    支付宝账号需要申请开通 移动支付 产品。
    接口集成时，需要利用支付宝开发包里的 openssl 工具生成密钥和公钥，公钥需要添加到支付宝账号中（登录支付宝-添加RSA公钥），密钥在安装插件的时候需要用到。
    1.使用git命令将插件下载到本地，并标记为$CORDOVA_PLUGIN_DIR
    $ git clone https://github.com/charleyw/cordova-plugin-alipay.git && cd cordova-plugin-alipay && export CORDOVA_PLUGIN_DIR=$(pwd)

    2.修改$CORDOVA_PLUGIN_DIR/plugin.xml，将<preference name="private_key" value="$PRIVATE_KEY" />
      改成<preference name="PRIVATE_KEY" value="你生成的private key"/>
      **注意**：总共有两处
      private key（这个私钥是 tianzhen@21tb.com 这个支付宝账号对应的私钥）:
      MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAOhpagO8Ll2dhuTZiFiqHKRgkSRX4iYXUDOq031sg4/+KrezZXJV3FZT3doWNelNu2NV7pi7UN8Vc+4onPg+a2/LLjzTK4iEB7KqzvS0/KuGoqNQAePxnxwq5h5BDBijUh8wTgAZwu8R7gM/Jzlkj6LcBlv4Khjolv9+y6rkd3DJAgMBAAECgYAPA9BvkVbFgYnXex5N7B+RlxOJb4wSverWi7DCJ6KQSPFlkNd6/YUQprZsgobVHcp/bmvNvjxJTU+CEWmiuBWksce+YloAvn2PmnI1DJuLJVY67xy7OjcRU6WQdS8qaeHuB+rbsIFKsCFpCGDYSBKb2ar26EFcX8JUwQn+c0bIAQJBAP0fVEDmmAzXHEqnlucty4jYSl6aAP8jwsMS+DNatO8br+xPPVHplgiQeg/kGPTmWJhXuS1CGxDwwGLgJCX5PoECQQDrDc9pvFkJXuV17o/RZmjydgu2DSvt3mpKv6xbWZ8i1smbP/ayQ8+zI6m5+LeorzhZwyiVcNdw8NOk4j71UZ5JAkEAn2Z2UXSlthhU6bKGNklBjojetJp5HDMx+FTe1sA9hwJBlCgGbqoR4IzTQWScTsUsb6t2osipcM6b6OhL+1ntgQJAVVbUQT1iziYoBSMyEAKwg6ccJWKu2lPwH2drulbVkh6NX9JfTOWV2SJPkvecJqBHQz+50lf/wD+Pd8O0u/iAEQJAf+Gla4gFfNHj+fBqKUHw0ZNNV5aW4p4XZcDDQEKPj8wnaAmJIQqxG+jFokP9FpSu+MinwOuFASBdGaBmUyrlYA==

    3.安装
    $ cordova plugin add $CORDOVA_PLUGIN_DIR --variable PARTNER_ID=2088021445559872 --variable SELLER_ACCOUNT=px86868755@126.com

4.使用方法
window.alipay.pay({
  tradeNo: tradeNo,
  subject: "测试标题",
  body: "我是测试内容",
  price: 0.02,
  fromUrlScheme:"demoScheme://afterPaymentSuccess",
  notifyUrl: "http://your.server.notify.url"
});
    参数说明
    tradeNo 这个是支付宝需要的，应该是一个唯一的ID号
    subject 这个字段会显示在支付宝付款的页面
    body 订单详情，没找到会显示哪里
    price 价格，支持两位小数
    fromUrlScheme 支付完成跳转的URL Scheme（iOS，Android），可以使用这个Cordova插件定义你的App的Scheme
    5.Android:
    在AndroidManifest.xml中配置如下：
    <intent-filter>
     <action android:name="android.intent.action.VIEW"/>
        <category android:name="android.intent.category.DEFAULT" />
        <category android:name="android.intent.category.BROWSABLE" />
        <data android:scheme="XueMall" />
    </intent-filter>

    ios:
    在/xuemall-mobile/platforms/ios/xueMall/xueMall-Info.plist中增加以下配置：
    <key>CFBundleURLTypes</key>
    <array>
      <dict>
    	<key>CFBundleURLSchemes</key>
    	<array>
    	  <string>XueMall</string>
    	</array>
    	<key>CFBundleURLName</key>
    	<string>com.myapp</string>
      </dict>
    </array>
    6.测试支付宝账户信息
    pay.alipay.partner=2088911041188294
pay.alipay.account=tianzhen@21tb.com

5.	缓存

在HTML5中，本地存储是一个window的属性，包括localStorage和sessionStorage，从名字应该可以很清楚的辨认二者的区别，前者是一直存在本地的，后者只是伴随着session，窗口一旦关闭就没了
So 选择了 $window.localStorage
手机app 如何获取sessionId ？？？
用户登录成功后，把sessionId传过来，保存在$window.localStorage.token中，然后 在每次请求时候，把请求链接中带上sessionId
因xuemall中判断若是未登录时候，返回“401”，在拦截器中判断，若是满足条件，强制用户去登陆
.factory('TokenInterceptor', function ($q, $window, AuthenticationService, $location) {
        return {
            request: function (config) {
                config.headers = config.headers || {};
                if ($window.localStorage.token) {
                    config.headers.Authorization = 'Bearer ' + $window.localStorage.token;
                    if (config.url.indexOf('.json') != -1) {
                        config.url += (config.url.indexOf('?') == -1 ? '?' : '&') + 'sid_=' + $window.localStorage.token;
                    }
                }
                return config;
            },

            requestError: function (rejection) {
                return $q.reject(rejection);
            },

            /* Set Authentication.isAuthenticated to true if 200 received */
            response: function (response) {
                if (response != null && response.status == 200 && $window.localStorage.token && !AuthenticationService.isAuthenticated) {
                    AuthenticationService.isAuthenticated = true;
                }
                return response || $q.when(response);
            },

            /* Revoke client authentication if 401 is received */
            responseError: function (rejection) {
                if (rejection != null && rejection.status === 401 && ($window.localStorage.token || !AuthenticationService.isAuthenticated)) {
                    delete $window.localStorage.token;
                    //AuthenticationService.isAuthenticated = false;
                    $location.path("/login");
                }

                return $q.reject(rejection);
            }
        };
    })


6.	如何设置拦截器呢？
$httpProvider.interceptors.push('TokenInterceptor');

7.	ionic隐藏tabs（三级路由的问题）
$rootScope.$on('$ionicView.beforeEnter', function () {
                $rootScope.hideTabs = true;
                if ($state.current.name == 'tab.dash' || $state.current.name == 'tab.courses' || $state.current.name == 'tab.user') {
                    $rootScope.hideTabs = false;
                }
                $ionicScrollDelegate.scrollTop();
            }
        )
一般情况下的tabs隐藏
http://www.cnblogs.com/maoyazhi/p/4424039.html

8.	上拉获取数据（分页）
ion-infinite-scroll 
当用户到达页脚或页脚附近时，ionInfiniteScroll指令允许你调用一个函数 。
当用户滚动的距离超出底部的内容时，就会触发你指定的on-infinite。
 
 

 
http://ionicframework.net/docs/api/directive/ionInfiniteScroll/

9.	Pull to Refresh（向下拉去 刷新）
ion-refresher
 
 
10.	Global Loading Screen with Interceptors (加载中提示)

进入HTTP拦截
angularjs的$httpprovider的提供 拦截的概念，它允许我们注入代码之前，发送一个请求，并在响应由控制器处理。利用这一点，我们可以集中我们的应用程序的代码加载到一个地方，确保它是易于维护。
var app = angular.module('ionicApp', ['ionic'])
app.config(function($httpProvider) {
  $httpProvider.interceptors.push(function($rootScope) {
    return {
      request: function(config) {
        $rootScope.$broadcast('loading:show')
        return config
      },
      response: function(response) {
        $rootScope.$broadcast('loading:hide')
        return response
      }
    }
  })
})

app.run(function($rootScope, $ionicLoading) {
  $rootScope.$on('loading:show', function() {
    $ionicLoading.show({template: 'foo'})
  })
  $rootScope.$on('loading:hide', function() {
    $ionicLoading.hide()
  })
})

http://learn.ionicframework.com/formulas/loading-screen-with-interceptors/

11.	$ionicModal $ionicModal 可以遮住用户主界面的内容框。（图片弹出）
http://learn.ionicframework.com/formulas/making-modals/
12.	手机键盘上的“搜索键” 能支持 搜索功能
.directive('ngEnter', function() {
        return function(scope, element, attrs) {
            element.bind("keydown keypress", function(event) {
                if(event.which === 13) {
                    scope.$apply(function(){
                        scope.$eval(attrs.ngEnter);
                    });

                    event.preventDefault();
                }
            });
        };
    })
 
13.	设置 phoneGap/Cordova 应用程序启动动画闪屏 SplashScreen
	添加动画闪屏支持 ，添加 插件cordova plugin add https://github.com/apache/cordova-plugin-splashscreen.git
	制作启动画面图片 根据 platforms\android\res\ 目录下的不同目录下的图片大小，分别制作不同屏幕适应的 png 格式图片，并一一替换。
	增加项目配置项   在项目根目录下的config.xml中添加两个配置项：
<preference name=”SplashScreen”value=”splash” />
<preference name=”SplashScreenDelay” value=”30000″ />
第一个配置指定了启动画面的文件名；
第二个设置指定启动画面停留的时间（单位为毫秒）
参考：
http://lzw.me/a/phonegapcordova-3-4-splashscreen.html

14.	ionic 在手机上返回 404 错误 问题(ionic 白名单)
安装一个 Whitelist 插件，再到 config.xml 文件里面去添加一个配置项就行了
ionic plugin add https://github.com/apache/cordova-plugin-whitelist.git
config.xml
<allow-navigation href="http://cloud.21tb.com/*" />
参考：
http://www.hijeffrey.com/tag/ionic-%E7%99%BD%E5%90%8D%E5%8D%95
http://docs.ionic.io/docs/cordova-whitelist

15.	双击退出app
第一步：cordova plugin add https://github.com/EddyVerbruggen/Toast-PhoneGap-Plugin.git
第二步：
 

16.	打包apk并添加证书
    $ cordova plugin rm cordova-plugin-console
    $ cordova build --release android
    $ keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000
$ jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.keystore android-armv7-release-unsigned.apk alias_name
 $ zipalign -v 4 android-armv7-release-unsigned.apk 人才在线.apk
17.	AngularJS 指令的 Scope (作用域)
当我们将scope的属性设置为{}时，我们可以做更多的事情。
AngularJS最强的大的地方之一就是它可以构建组建，无论放在哪里都是可以使用的；
不得不归功于指令的这个属性；当我们将scope设置为{}时，意味着我们创建的一个新的与父作用域隔离的新的作用域，这使我们在不知道外部环境的情况下，就可以正常工作，不依赖外部环境
下面我们来看看如何使用这些前缀标识符：
@
这是一个单项绑定的前缀标识符
使用方法：在元素中使用属性，好比这样<div my-directive my-name="{{name}}"></div>，注意，属性的名字要用-将两个单词连接，因为是数据的单项绑定所以要通过使用{{}}来绑定数据。
=
这是一个双向数据绑定前缀标识符
使用方法：在元素中使用属性，好比这样<div my-directive age="age"></div>,注意，数据的双向绑定要通过=前缀标识符实现，所以不可以使用{{}}。
&
这是一个绑定函数方法的前缀标识符
使用方法：在元素中使用属性，好比这样<div my-directive change-my-age="changeAge()"></div>，注意，属性的名字要用-将多个个单词连接。
http://segmentfault.com/a/1190000002773689
http://damoqiongqiu.iteye.com/blog/1917971

ionic ：
	http://learn.ionicframework.com/formulas/
	http://ionicframework.com/docs/api/
	http://ionichina.com/ 
	http://www.ionic.wang/js_doc-index.html

angularjs
•	AngularJS系列教程文章 – 大漠穷秋
•	AngularJS入门系列教程 – AngularJS中文社区
•	AngularJS学习笔记 – 邹业盛
•	AngularJS精彩问答 - 知乎

